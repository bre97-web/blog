---
/**
 * This page will show all mdx files.
 * @url /blog
 */

import { getCollection } from "astro:content";
import { ViewTransitions } from "astro:transitions";
import Footer from "../../core/footer/footer.astro";
import BaseHead from "../../core/head/base-head.astro";
import HeaderDrop from "../../core/header/header-drop.astro";
import HeaderTitle from "../../core/header/header-title.astro";
import Header from "../../core/header/header.astro";
import BottomAppBar from "../../core/navigation/bottom-app-bar.astro";
import NavigationRail from "../../core/navigation/navigation-rail.astro";
import SearchCollection from "../../core/search-collection/search-collection.vue";
import HctPicker from "../../core/theme-provider/HctPicker.vue";
import SwitchThemeIconButton from "../../core/theme-provider/switch-theme-icon-button.astro";
import ProductHtml from "../../layouts/product-html.layout.astro";
import ProductPage from "../../layouts/product-page.layout.astro";

const blogs = await getCollection("blogs");
const tags = Array.from(
    new Set(
        blogs
            .map((blog) => blog.data.tags)
            .reduce((pre, cur) => [...pre, ...cur], []),
    ),
);
---

<ProductHtml>
    <BaseHead slot="head" />
    <ViewTransitions slot="head" />
        <ProductPage>
            <BottomAppBar slot="bottom-app-bar" />
            <NavigationRail slot="navigation-rail" />
            <div class="sticky-header">
                <Header>
                    <HeaderTitle />
                    <SwitchThemeIconButton slot="actions" />
                    <HctPicker client:only="vue" slot="actions" />
                </Header>
                <HeaderDrop />
            </div>
            <div class="page-content">
                <SearchCollection
                    collection={blogs}
                    baseUrl={`./blog/`}
                    client:only="vue"
                />

                <md-chip-set class="tag-filter chip-set">
                    {
                        tags.map((tag) => (
                            <md-filter-chip class="filter-chip" label={tag} />
                        ))
                    }
                </md-chip-set>

                <div class="collection-list">
                    <ul class="blog-list">
                        {
                            blogs.map((blog) => (
                                <a
                                    href={`/blog/${blog.slug}`}
                                    class="blog-list-item"
                                    data-tags={blog.data.tags}
                                >
                                    <section>
                                        <h1 class="headline">
                                            {blog.data.headline}
                                        </h1>
                                        <p class="description">
                                            {blog.data.description}
                                        </p>
                                    </section>
                                    <p class="file-name">{blog.slug}</p>
                                    {blog.data.tags.length !== 0 && (
                                        <ul class="tags">
                                            {blog.data.tags.map(
                                                (tag: string) => (
                                                    <li class="tag">{tag}</li>
                                                ),
                                            )}
                                        </ul>
                                    )}

                                    <md-ripple />
                                </a>
                            ))
                        }
                    </ul>
                </div>
                <Footer />
            </div>
        </ProductPage>
</ProductHtml>

<script>
    import type { MdChipSet, MdFilterChip } from "@material/web/all"

    const chipset = document.querySelector(".tag-filter.chip-set") as MdChipSet;
    const chips = Array.from(
        chipset.querySelectorAll("&>.filter-chip"),
    ) as Array<MdFilterChip>;

    const blogs = Array.from(
        document.querySelectorAll(".blog-list>.blog-list-item"),
    ) as Array<HTMLElement>;

    const setBlogVisible = (blog: HTMLElement, visible: boolean) => {
        if (visible) {
            blog.removeAttribute("invisible");
        } else {
            blog.setAttribute("invisible", "");
        }
    };

    chipset.addEventListener("click", (e) => {
        const isChipClick = chips.includes(e.target as unknown as any);

        if (!isChipClick) {
            return;
        }

        const activatedChips = chips
            .filter((chip) => chip.selected)
            .map((chip) => chip.label);

        if (activatedChips.length === 0) {
            blogs.forEach((blog) => {
                setBlogVisible(blog, true);
            });
            return;
        }

        for (const index in blogs) {
            const blog = blogs[index];

            const attr = blog.getAttribute("data-tags");
            if (attr === null) {
                continue;
            }

            const attrArray = attr.split(",");
            let isTarget = false;
            for (const attrArrayItem of attrArray) {
                if (activatedChips.includes(attrArrayItem)) {
                    isTarget = true;
                    break;
                }
            }

            setBlogVisible(blog, isTarget);
        }
    });
</script>

<style>
    .sticky-header {
        --navigation-rail-width-computed: 84px;

        position: sticky;
        top: 0;
        background-color: var(--md-sys-color-surface);
        z-index: 1;
        --header-padding-left: 24px;
        --header-padding-right: 24px;
        @media (min-width: 840px) {
            --header-padding-left: 60px;
            --header-padding-right: 60px;
        }
        @media (min-width: 1600px) {
            --header-width: calc(
                1600px - var(--navigation-rail-width-computed)
            );
        }
    }
    .page-content {
        --navigation-rail-width-computed: 84px;

        padding: 24px;
        @media (min-width: 840px) {
            padding-left: 60px;
            padding-right: 60px;
        }
        @media (min-width: 1600px) {
            max-width: calc(1600px - var(--navigation-rail-width-computed));
        }
        @media (min-width: 1600px) {
            margin: auto;
        }

        & > :not([hidden]) ~ :not([hidden]) {
            --space-y-reverse: 0;
            margin-top: calc(32px * calc(1 - var(--space-y-reverse)));
            margin-bottom: calc(32px * var(--space-y-reverse));
        }
    }
    .collection-list {
        & > h1.collection-series-name:first-child {
            @apply mt-0;
        }
        & > h1.collection-series-name {
            @apply mt-8 mb-2 text-on-surface;
        }
    }
</style>

<style>
    .blog-list {
        display: grid;
        grid-template-columns: 1fr;
        gap: 16px;
        @media (min-width: 600px) and (max-width: 840px) {
            grid-template-columns: 1fr 1fr;
        }
        @media (min-width: 840px) and (max-width: 1200px) {
            grid-template-columns: 1fr 1fr 1fr;
        }
        @media (min-width: 1200px) and (max-width: 1600px) {
            grid-template-columns: 1fr 1fr 1fr 1fr;
        }
        @media (min-width: 1600px) {
            grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
        }
    }
</style>

<style>
    .blog-list-item {
        @apply shape-medium bg-surface-container-high overflow-clip relative z-0 flex flex-col justify-between;
        @apply w-full;
        --md-ripple-hover-color: var(--md-sys-color-primary-container);
        transition-duration: 200ms;

        & > section {
            @apply flex flex-col px-4 py-4;

            & > .headline {
                @apply text-title-small line-clamp-2;
                @apply text-on-surface;
            }
            & > .description {
                @apply text-body-small line-clamp-3;
                @apply text-on-surface-variant;
            }
        }
        & > .file-name {
            @apply px-4 pb-2 text-label-small line-clamp-2 text-on-surface-variant;
        }
        & > ul.tags {
            @apply flex flex-wrap gap-2 select-none pb-4 px-4;

            & > li.tag {
                @apply text-on-surface-variant relative bg-surface rounded-md px-2 py-1 pointer-events-none text-label-small;
            }
        }

        &[invisible] {
            display: none;
        }
    }
    .blog-list-item:hover {
        @apply shape-extra;
    }
    .blog-list-item:active,
    .blog-list-item:hover:active,
    .blog-list-item:focus,
    .blog-list-item:focus-within {
    }
</style>

<!-- Tags Chip Set -->
<style>
    .tag-filter.chip-set {
    }
</style>
